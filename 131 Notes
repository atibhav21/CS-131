CS 131 - Section 1
TA - Tomar Weiss
Email: tweiss@cs.ucla.edu
Office Hours: TBA (Monday Morning)

Slides Link: goo.gl/gLraJl

_ - Wildcard (just like swift)
^ - Concatening Strings

rlwrap ocaml (up arrow for previous command)

;; Enter (To run the command)

(* return sum of elements in list *)
let rec sum l =
	match l with 
	[] -> 0
	| h::t -> h + (sum t)

(* concatenate elements of a string *)
let rec concat l =
	match l with
	[] -> ""
	| h::t -> h ^ (concat t)

(* clone 9 5 -> [9;9;9;9;9] *)

let rec clone z n =
	match n with
	0 -> []
	| _ -> z:: (clone z (n-1))

(* every_second [1;2;3;4;5] -> [2:4] *)
let rec every_second l =
	match l with
	[] -> []
	| [_] -> []
	| h1::h2::t -> h2::(every_second t)

(* contains 1 [1;2;3] -> true *)
let rec contains e l =
	match l with
	[] -> false
	| h::t -> if h = e then true
			  else (contains e t)

let rec delete_element e l =
	[] -> []
	| h::t -> if h = e then (delete_element e t)
			  else h::(delete_element e t)


Lecture 

Literate Programming - Code contains comments which can later be converted to a textbook format

hash trie

Code for problem given in class

tr -cs A-Za-z '\n*' | sort | uniq -c | sort -rn 



Sapir-Wharf Hypothesis
	- The language we use to some extent determines how we view the work abd how we think
	- The structural diversity of languages is essentially limitless


Lecture - 4 hours/week	3.5 hours/week
Discussion - 2 hours/week	1.7 hours/week
Outside Study - 6 hours/week 	10 hours/week

Textbook: Read Chapters 1 - 3 (Anything that says ML 5,7,9)

Language Design Issues
	- Orthonoality 
	- Efficiency (CPU Time, Memory, power, network access)
	- Simplicity 
	- Convenience
	- Safety (Buffer overruns, memory leaks, race conditions)
	- Readability, mantainability
	- Write-ability
	- loose typing (opposes safety)
	- Portability
	- Evolution of the language

TEX - formatting language
Rust - Systems Language (like C) but safer (memory, races)
Go - Systems Language
Ceylan - Java meets JS
F# - Functional Language designed by Microsoft, ML meets C#
GNU Emacs (C Core)
	Obj args[7]
	args[0] = a0,
	...
	args[6] = Qnil,
	Foo(7, args)


#define ELTS(a)	(sizeof(a)/sizeof(a[0]))